#+TITLE: Counterpart Challenge

#+html: <p align="center"><img src="https://github.com/arturgoms/counterpart-challenge/actions/workflows/build.yml/badge.svg" /></p>

* Earthquake search service
** Documentation
The API document can be found in src/docs/api.openapi.json
** Features
- Django 4 project with a really nice structure
- Locale to translate the panel
- Admin panel that is not ugly as hell
- Silk to manage queries
- Redoc to show the api doc inside admin panel
- Docker compose file to run the production environment locally
- Docker image with everything that the django app needs
- Using gunicorn so we can have a better performance in production
- Celery Task and Scheduler to you can schedule tasks
- Flower to see what celery is doing
- Postgres 13 as database with pgbouncer as connection pooler
- Poetry to manage dependencies
- Test, Lint (pylint), Formatter (black), Build pipelines
- Make file with a lot of shortcuts
- Kubernetes architecture
** Development
*** Minimal environment
1 Clone and enter the dir
#+BEGIN_SRC shell
git clone git@github.com:arturgoms/counterpart-challenge.git
cd counterpart-challenge
cp .env.template .env
#+END_SRC
** inside .env uncomment line 20 and comment the line 17 **
2 Create the environment:
#+BEGIN_SRC shell
poetry install
#+END_SRC
3  Enter in the shell
#+BEGIN_SRC shell
source $(poetry env info --path)/bin/activate
#+END_SRC
4 I usually just run the postgres inside docker like this:
#+BEGIN_SRC shell
docker compose up db -d
#+END_SRC
Run the migrations:
#+BEGIN_SRC shell
python src/manage.py migrate
#+END_SRC
And then run the django project locally:
#+BEGIN_SRC shell
python src/manage.py runserver
#+END_SRC
5 Access:
- admin - http:/127.0.0.1:8000/admin
- silk - http:/127.0.0.1:8000/silk
- api - http:/127.0.0.1:8000/api
6 Run the frontend
#+BEGIN_SRC shell
cd frontend
npm install
npm run serve
#+END_SRC
7 Access
- frontend - http:/127.0.0.1:8080/

*** Docker compose
Alternatively you can run everything inside container but you ill need to build it everytime that you change something in the django app

Up the containers:
#+BEGIN_SRC shell
docker compose up -d --build
#+END_SRC

Now you need to use the nginx port to access it:
- frontend - http:/127.0.0.1:80/
- api - http:/127.0.0.1:80/api
And Silk will not exist anymore because you are using a 'production like' environment.
- If you get 502 bad gateway just wait a little :)

** Production
In production you will need to apply the configs for kubernetes.